// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: company_service.proto

package companyservice

import (
	"context"

	"go_zero-crud/rpc/service/company_service/pb/company_service"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CompanyRequest  = company_service.CompanyRequest
	CompanyResponse = company_service.CompanyResponse
	EmptyResponse   = company_service.EmptyResponse

	CompanyService interface {
		GetCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyResponse, error)
		CreateCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	}

	defaultCompanyService struct {
		cli zrpc.Client
	}
)

func NewCompanyService(cli zrpc.Client) CompanyService {
	return &defaultCompanyService{
		cli: cli,
	}
}

func (m *defaultCompanyService) GetCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyResponse, error) {
	client := company_service.NewCompanyServiceClient(m.cli.Conn())
	return client.GetCompany(ctx, in, opts...)
}

func (m *defaultCompanyService) CreateCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	client := company_service.NewCompanyServiceClient(m.cli.Conn())
	return client.CreateCompany(ctx, in, opts...)
}
