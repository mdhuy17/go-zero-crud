// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: user_service.proto

package userservice

import (
	"context"

	"go_zero-crud/rpc/service/user_service/pb/user_service"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	EmptyResponse = user_service.EmptyResponse
	UserRequest   = user_service.UserRequest
	UserResponse  = user_service.UserResponse

	UserService interface {
		GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
		CreateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	client := user_service.NewUserServiceClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

func (m *defaultUserService) CreateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	client := user_service.NewUserServiceClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}
